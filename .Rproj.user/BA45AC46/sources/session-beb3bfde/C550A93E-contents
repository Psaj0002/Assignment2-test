---
title: "ETC5513_Assignment_2"
author: Pranav Sajeev - 35571381
format:
  html:
    css: style.css
    theme: cosmo
editor: visual
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(
  echo = FALSE,
  message = FALSE,
  warning = FALSE,
  fig.align = "center"
)
```

This guide will demonstrate how to use git ..\
\*\*\* INTRO REQUIRED \*\*\*

#### **1. Create an RStudio project. In this folder, create a simple qmd file called `example.qmd` that can be knitted into a HTML file. Show the result of the knitted file.**

-   First, open RStudio.

-   Then navigate to the File section, and select "New Project" .

-   In the menu that pops up after this, select "New Directory", and then select "New Project".

-   Set your desired directory name and choose where you want the project to be stored, as shown below, then click on "Create Project"

-   Navigate to the File section again, in the new project we just created, and click on "New File", and select "Quarto Document" to create a .qmd file. Save it and name it `example.qmd` .\

    ```{r}
    knitr::include_graphics("./images/Screenshot 2025-05-13 at 7.33.11.png")
    ```

    Quarto .qmd files are very useful as they let you combine code, results, and text in one place for fully reproducible documents. They’re flexible, easy to format, and can output to HTML, PDF, or Word.

-   Upon creating the Qmd file, you will see that there is some default text that is present in the file. We can delete or replace this text, and then select the "Render" button shown in the figure below. This will create a html page of the contents of the qmd file. Rendering the qmd file will require you to save it first.

```{r}
knitr::include_graphics("./images/Screenshot 2025-05-13 at 7.33.21.png")
```

-   The rendered (or knitted) html will open in the web browser as shown:

```{r}
knitr::include_graphics("./images/Screenshot 2025-05-13 at 7.33.30.png")
```

#### **2. From the command line interface, initialise this folder as a git repository and push it to a GitHub repository.**

-   RStudio has a section called "Terminal" that is a Command Line Interface (CLI), so we will be using it to perform all CLI based tasks.

-   Now use the CLI and open the directory for the folder.

-   Use the command `git init` to create a local repository. This command initialises a new Git repository in the current directory, allowing you to use version control. However, as this is only a local repository, it is not connected to GitHub yet.

-   Add and commit the files into the local repository we just created using the commands given below. Git does not "create" a branch unless there is at least one commit made, so the local repository is currently empty. We do this so that the local repository has one commit.

``` bash
git add .

git commit -m "Initial Commit"
```

-   Now copy the SSH code of the desired empty remote repository on GitHub, and enter it in the following code.

``` bash
git branch -M main

git remote add origin <enter your SSH code here>

git push -u origin main
```

-   Here, `git branch -M main` renames the current branch to "main".\
    `git remote add origin <enter your SSH code here>` links the local repo to the remote repo on GitHub.\
    `git push -u origin main` pushes the main branch on the local repository to the remote repository, the `-u` sets the upstream to the GitHub repository that we have added. This command ensures that git knows which remote repository to push to going forward. Also note that this is a one time operation, and future push commands will not have `-u` .

<!-- -->

-   Now your folder has been pushed to your repository in GitHub. You should be able to see the files in your folder on GitHub.

#### **3. Create a new branch called `testbranch`. Modify the file `example.qmd` and add the changes to both the local and remote repositories.**

-   To create a new branch, use the command `git branch <branch name>` . In this case we will name the branch testbranch, so the command will be

``` bash
git branch testbranch
```

-   To see which branch we are currently on, just enter the command `git branch`

```{r}
knitr::include_graphics("./images/Screenshot 2025-05-13 at 7.33.51.png")
```

This shows that we are now on the main branch.

-   To switch to another branch, we use the command `git switch <branch name>` .

```{r}

knitr::include_graphics("./images/Screenshot 2025-05-13 at 7.33.59.png")
```

Branches are an extremely useful and important feature of git. It allows the user to create a duplicate of the repository and make changes to it without affecting the main branch or any other branches. This means that multiple users can work on the same project at the same time without affecting the main project, and just add the changes to the main branch when they're done.

-   Now that we are on testbranch, make some changes to `example.qmd` . Note that `testbranch` has only been created on the local repository as of now. It will not show on GitHub yet as we have not pushed it.

-   After the changes have been made, save the file. Now stage the file and commit the change as usual. This commit will be in `testbranch` and not in `main`.\
    When we push these changes to the remote repository, we use the command `git push origin testbranch` as we are pushing the changes to the branch called `testbranch` .

    ```{r}
    knitr::include_graphics("./images/Screenshot 2025-05-13 at 7.26.50.png")
    ```

-   Once we look at our remote repository on GitHub, we can see the file has been changed.

    ```{r}
    knitr::include_graphics("./images/Screenshot 2025-05-13 at 8.00.31.png")
    ```

#### **4. Create a folder called data, and add the data from Assignment 1 to that folder. Amend the previous commit to include the data folder. Push this amended commit to the remote.**

-   In the finder/file explorer, add a file called data that has some data in it. The folder should look like this:

    ```{r}
    knitr::include_graphics("./images/Screenshot 2025-05-13 at 8.07.29.png")
    ```

-   In cases such as this where we would like to modify the previous commit to include a file that we may have missed out, we can use the command `git commit --amend`. This command lets you modify the previous commit, so we can use it to add files or change the commit message.

-   Before we use the command, we have to stage the folder using `git add` first. The end commands will look like this:

    ``` bash
    git add data/
    git commit --amend
    ```

-   Once this code is entered, a text editor will open with the existing commit message.

    ```{r}
    knitr::include_graphics("./images/Screenshot 2025-05-13 at 11.33.42.png")
    ```

-   We can make changes to this commit message in the text editor. Be sure to save the text file and close the text editor. If you do not wish to change the commit message, you can simply close the text editor. Once this is done, the current commit should have the new commit message and all the files we staged earlier as well.\
    We can check the commits using the command `git log –oneline`.

    ```{r}
     knitr::include_graphics("./images/Screenshot 2025-05-13 at 11.53.22.png")
    ```

-   Now push the commit to the remote repository using:

``` bash
git push origin testbranch
```

#### **5. Switch back to the main branch and modify example.qmd in a different way such that it will conflict with testbranch. Commit and push these changes.**

-   To switch back to the main branch, use `git switch main`. This switches the current branch from `testbranch` to `main`. To check the branch you are currently in, use `git branch` like we did previously.
-   Once we switch to main, you may notice that `example.qmd` looks different. This is because we made changes to `example.qmd` while we were on the branch `testbranch` and all the changes were committed and pushed to that branch. The `main` branch remains unchanged as nothing was committed or pushed to this branch.
-   Make changes in `example.qmd` in the same line as the changes in `testbranch`.

```{r}
knitr::include_graphics("./images/Screenshot 2025-05-14 at 12.36.29.png")
```

-   Add, commit and push these changes using:

``` bash
git add example.qmd
git commit -m "Adding changes to example.qmd on main (step5)"
git push origin main
```

#### **6. Merge the changes in testbranch onto main. Show the conflict and fixing the merge conflict. Push the changes to GitHub, showing the status and changes in GitHub.**

-   Merging is the process of combining the changes from one branch into another branch. \
    We use the command `git merge <branchname>` to merge the branch into the current branch. The main real world use case for merging is to integrate work from multiple contributors in different branches.
-   However, there may be cases where the same file has been modified in different ways in the branches we are trying to merge. Git will attempt to automatically combine all changes, but when the changes conflict with each other, git will ask the user which changes are to be kept. This is called a merge conflict. Git will halt the merging process and mark the files with conflicts.
-   Now we will try to get the changes from `testbranch` into the `main` branch. Note that you will have to be in the branch that you want to get the changes into, in this case, it is `main`.

```{r}
knitr::include_graphics("./images/Screenshot 2025-05-14 at 11.30.48.png")
```

-   This is what a merge conflict looks like. It shows both the changes made on main and the changes made on testbranch. Now it is up to the user to decide which changes they want to keep.

-   Once the decision has been made, delete the markers and save the file. Here we are keeping the changes from both the branches.

    ```{r}
    knitr::include_graphics("./images/Screenshot 2025-05-14 at 11.35.46.png")
    ```

-   Also note that we have not pushed the data folder to the remote repo on `main`. So when we merge the two branches, the data folder gets added to the staging area as well.

-   Now we commit the
